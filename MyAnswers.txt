Домашнее задание 1

2. Программисты - это специалисты, занимающиеся созданием программ различной направленности и сложности. 
Программист должен знать типовые алгоритмы решения задач, свой язык программирования. Должен уметь находить оптимальное решение для поставленной задачи.
На работе программист выполняет ТЗ =)

Домашнее задание 2
1. Интерфесы бывают полезны, елси нам нужно сделать множественное наследование. 
Мы не можем наследоваться от нескольких классов сразу, а вот от интерфейсов можем. 
Минус интерфейсов в том, что внутри них мы можем только объявлять методы, но не реализовывать.
2. Обобщения бывают нужны, чтобы создать функцию, которая сможет работать с разными типами переменных.
Например, я так реализовал функцию Swap. Кстати, обратил внимание, что при использовании обобщения нельзя поменять местами переменные без использования буферной.
Также можно использовать обощения для сортировки (почему бы нет?) или "прохождению" по массиву или списку данных.

Домашнее задание 3
2. Исключения нужны, чтобы программа не "крашилась", а просто сообщала об ошибке, при этом дальнейшая часть кода будет выполняться.
Так, например, можно оборачивать в исключения часть кода, где используются объекты, которые необходимо вручную "подключать" в юнити, потому что об этом можно забыть (я иногда забываю) и получить null reference.

Домашнее задание 7
1. 
- Массив используем, когда точно знаем количество элементов и также знаем, что нам не понадобится это количество менять. Плюсы - быстрый доступ к любому элементу О(1), занимает меньше памяти. Минусы - полная статичность.
- List. По сути массив с "запасом" ячеек. Плюсы - всё еще быстры доступ и фиксированное количество памяти, можно увеличивать количество элементов. Минусы - занимает больше места, не полная динамичность, новое место выделяется, но только под фиксированное число элементов. Как мне кажется это одна из самых оптимальных структур
- LinkedList (список). Плюсы - полная динамичность, можно добавлять, удалять, "вклинивать" элементы в любое время. Минусы - занимает в 3 раза больше места, потому что хранит еще и ссылки на предыдущий и следующий элементы, чтобы найти нужный элемент придется проходиться по всему списку О(n).
- Dictionary (таблица). Плюсы - быстрый поиск элемента по ключу О(1), динамичность. Минусы - больше памяти за счет хранения ключей, возможность возникновения коллизий.
- Бинарные деревья. Плюсы - бинарная структура, за счет которой упрощается поиск элементов, динамичность. Минусы - занимает много места в памяти (опять же за счет ссылок).